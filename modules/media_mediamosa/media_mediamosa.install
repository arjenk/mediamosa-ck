<?php
/**
 * @file
 * Install, update, and uninstall functions.
 */

/**
 * Implements hook_requirements().
 *
 * Checks the existance of the jquery_localscroll library.
 */
function media_mediamosa_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if (($phase == 'runtime') || ($phase === 'install')) {
    $requirements['media_mediamosa']['title'] = $t('No longer supported');
    $requirements['media_mediamosa']['description'] = $t('The module media_mediamosa is no longer supported and can not be turned on.');
    $requirements['media_mediamosa']['severity'] = REQUIREMENT_ERROR;;
  }

  return $requirements;
}

/**
 * Definitions of Metadata fields of MediaMosa.
 *
 * No longer used, just here for uninstall.
 *
 * @return array
 *   MediaMosa metafield name as a key.
 *
 * Each element is an array with the following fields:
 *   - 'label'
 *     Label used in Drupal interface.
 *   - 'read_only'
 *     Boolean, if TRUE Drupal can only display this data;
 *   - 'section'
 *     Can be 'dublincore', 'qualified_dublincore' or 'technical' use it to
 *     group data in section;
 *   - 'field_name'
 *     Field name in Drupal.
 *   - 'rdf'
 *     Property name for RDF, if differs from key value.
 * @see http://www.w3.org/TR/xhtml-rdfa-primer/
 * @see http://dublincore.org/documents/library-application-profile/index.shtml
 */
function _media_mediamosa_metadata_get_default() {

  static $fields = FALSE;

  if ($fields) {
    return $fields;
  }

  $fields_dc = array(
    'contributor' => array(
      'label' => t('Contributor'),
    ),
    'coverage_spatial' => array(
      'label' => t('Сoverage spatial'),
      'rdf'   => 'spatial',
    ),
    'coverage_temporal' => array(
      'label' => t('Сoverage temporal'),
      'rdf'   => 'temporal',
    ),
    'creator' => array(
      'label' => t('Creator'),
    ),
    'date' => array(
      'label' => t('Date'),
    ),
    'description' => array(
      'label' => t('Description'),
    ),
    'format' => array(
      'label' => t('Format'),
    ),
    'identifier' => array(
      'label' => t('Identifier'),
    ),
    'language' => array(
      'label' => t('Language'),
    ),
    'publisher' => array(
      'label' => t('Publisher'),
    ),
    'relation' => array(
      'label' => t('Relation'),
    ),
    'rights' => array(
      'label' => t('Rights'),
    ),
    'source' => array(
      'label' => t('Source'),
    ),
    'subject' => array(
      'label' => t('Subject'),
    ),
    'title' => array(
      'label' => t('Title'),
    ),
    'type' => array(
      'label' => t('Type'),
    ),
  );

  $fields_qdc = array(
    'created' => array(
      'label' => t('Created'),
    ),
    'description_abstract' => array(
      'label' => t('Description abstract'),
      'rdf'   => 'abstract',
    ),
    'format_extent' => array(
      'label' => t('Format extent'),
      'rdf'   => 'extent',
    ),
    'format_medium' => array(
      'label' => t('Format medium'),
      'rdf'   => 'medium',
    ),
    'hasformat' => array(
      'label' => t('Has format'),
      'rdf'   => 'hasFormat',
    ),
    'isformatof' => array(
      'label' => t('Is format of'),
      'rdf'   => 'isFormatOf',
    ),
    'isreferencedby' => array(
      'label' => t('Is referenced by'),
      'rdf'   => 'isReferencedBy',
    ),
    'issued' => array(
      'label' => t('Issued'),
    ),
    'license' => array(
      'label' => t('License'),
    ),
    'rightsholder' => array(
      'label' => t('Rightsholder'),
      'rdf'   => 'rights',
    ),
    'title_alternative' => array(
      'label' => t('Alternative title'),
      'rdf'   => 'alternative',
    ),
  );

  // Some of the keys are named exactly as entries in metadata array inside
  // Mediamosa. Different story for 'mediafile_id', 'size', 'original'.
  $fields_tech = array(
    'file_duration' => array(
      'label' => t('Duration'),
    ),
    'filesize' => array(
      'label' => t('File size'),
    ),
    'mediafile_id' => array(
      'label' => t('Mediafile ID'),
    ),
    'mime_type' => array(
      'label' => t('MIME type'),
    ),
    'container_type' => array(
      'label' => t('Container'),
    ),
    'size' => array(
      'label' => t('Size'),
    ),
    'fps' => array(
      'label' => t('FPS'),
    ),
    'video_codec' => array(
      'label' => t('Video Codec'),
    ),
    'original' => array(
      'label' => t('Original'),
    ),
  );

  // Set 'section' and 'readonly' to all DC.
  foreach ($fields_dc as $name => &$field_dc) {
    $field_dc['section'] = 'dc';
    $field_dc['readonly'] = FALSE;
  }

  // Set 'section' and 'readonly' to all QDC.
  foreach ($fields_qdc as $name => &$field_qdc) {
    $field_qdc['section'] = 'qdc';
    $field_qdc['readonly'] = FALSE;
  }

  // Set 'section' and 'readonly' to all technical.
  foreach ($fields_tech as $name => &$field_tech) {
    $field_tech['section'] = 'mft';
    $field_tech['readonly'] = TRUE;
    $field_tech['rdf'] = FALSE;
  }

  // Now combine into one array.
  $fields = $fields_dc;
  $fields += $fields_qdc;
  $fields += $fields_tech;

  // Set default RDF terms.
  foreach ($fields as $name => &$field) {
    if (!isset($field['rdf'])) {
      $field['rdf'] = $name;
    }
  }

  // We're forced to introduce another element in addition to key because of 32
  // char limitation.
  foreach ($fields as $key => &$field) {
    $field['field_name'] = drupal_substr('field_mm_meta_' . $key, 0, 32);
  }

  return $fields;
}

/**
 * Implements hook_uninstall().
 *
 * Takes care about eliminating our Metadata fields.
 */
function media_mediamosa_uninstall() {

  // When field module is enabled.
  if (module_exists('field')) {
    $fields = _media_mediamosa_metadata_get_default();
    foreach ($fields as $item) {
      field_delete_field($item['field_name']);
    }
  }

  // We no longer use our mediamosa file wrapper. No way we can delete it
  // the normal way, so just remove them.
  $query = db_delete('file_managed');
  $query->condition('uri', 'mediamosa://%', 'LIKE');
  $query->execute();

  entity_get_controller('file')->resetCache();

  // Clean up own variables.
  db_delete('variable')
    ->condition('name', 'media_mediamosa_%', 'LIKE')
    ->execute();
}

/**
 * Update Media entities to File entities. Update (7016) copied from Media
 * module.
 */
function media_mediamosa_update_7000() {
}

/**
 * Clear cache as some classes have been moved or added.
 */
function media_mediamosa_update_7001() {
}

/**
 * Module media_mediamosa is no longer supported and will be turned off. In
 * later versions of CK, this module will be removed.
 */
function media_mediamosa_update_7002() {
  // Disable our module.
  module_disable(array('media_mediamosa'));

  // Now uninstall.
  drupal_uninstall_modules(array('media_mediamosa'));
}
